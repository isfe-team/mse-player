{"version":3,"file":"pcmToWav.umd.js","sources":["../../src/helpers/bufferToBase64.ts","../../src/helpers/bufferToBase64Wav.ts","../../src/helpers/addWavHeader.ts","../../src/helpers/readAsArrayBuffer$.ts","../../src/helpers/pcmToWav.ts"],"sourcesContent":["/**\r\n * bufferToBase64\r\n */\r\n\r\nexport default function bufferToBase64Wav (buffer: ArrayBuffer) {\r\n  const content = new Uint8Array(buffer).reduce((data, byte) => {\r\n    return data + String.fromCharCode(byte)\r\n  }, '')\r\n\r\n  return btoa(content)\r\n}\r\n","/**\r\n * bufferToBase64Wav\r\n */\r\n\r\nimport bufferToBase64 from './bufferToBase64'\r\n\r\nexport default function bufferToBase64Wav (buffer: ArrayBuffer) {\r\n  return `data:audio/wav;base64,${bufferToBase64(buffer)}`\r\n}\r\n","/**\r\n * addWavHeader\r\n */\r\nexport default function addWavHeader (samples: ArrayBuffer, sampleRate: number, sampleBits: number, channelCount: number) {\r\n  const dataLength = samples.byteLength\r\n  const buffer = new ArrayBuffer(44 + dataLength)\r\n  const view = new DataView(buffer)\r\n  function writeString (view: DataView, offset: number, str: string) {\r\n    for (let i = 0; i < str.length; i++) {\r\n      view.setUint8(offset + i, str.charCodeAt(i))\r\n    }\r\n  }\r\n  let offset = 0\r\n  /* 资源交换文件标识符 */\r\n  writeString(view, offset, 'RIFF'); offset += 4\r\n  /* 下个地址开始到文件尾总字节数,即文件大小-8 */\r\n  view.setUint32(offset, /*32*/ 36 + dataLength, true); offset += 4\r\n  /* WAV文件标志 */\r\n  writeString(view, offset, 'WAVE'); offset += 4\r\n  /* 波形格式标志 */\r\n  writeString(view, offset, 'fmt '); offset += 4\r\n  /* 过滤字节,一般为 0x10 = 16 */\r\n  view.setUint32(offset, 16, true); offset += 4\r\n  /* 格式类别 (PCM形式采样数据) */\r\n  view.setUint16(offset, 1, true); offset += 2\r\n  /* 通道数 */\r\n  view.setUint16(offset, channelCount, true); offset += 2\r\n  /* 采样率,每秒样本数,表示每个通道的播放速度 */\r\n  view.setUint32(offset, sampleRate, true); offset += 4\r\n  /* 波形数据传输率 (每秒平均字节数) 通道数×每秒数据位数×每样本数据位/8 */\r\n  view.setUint32(offset, sampleRate * channelCount * (sampleBits / 8), true); offset +=4\r\n  /* 快数据调整数 采样一次占用字节数 通道数×每样本的数据位数/8 */\r\n  view.setUint16(offset, channelCount * (sampleBits / 8), true); offset += 2\r\n  /* 每样本数据位数 */\r\n  view.setUint16(offset, sampleBits, true); offset += 2\r\n  /* 数据标识符 */\r\n  writeString(view, offset, 'data'); offset += 4\r\n  /* 采样数据总数,即数据总大小-44 */\r\n  view.setUint32(offset, dataLength, true); offset += 4\r\n  function floatTo32BitPCM (output: DataView, offset: number, input: ArrayBuffer) {\r\n    const i32xs = new Int32Array(input)\r\n    for (let i = 0; i < i32xs.length; i++, offset += 4) {\r\n      output.setInt32(offset, i32xs[i], true)\r\n    }\r\n  }\r\n  function floatTo16BitPCM (output: DataView, offset: number, input: ArrayBuffer){\r\n    const i16xs = new Int16Array(input)\r\n    for (let i = 0; i < i16xs.length; i++, offset+=2) {\r\n      output.setInt16(offset, i16xs[i], true)\r\n    }\r\n  }\r\n  function floatTo8BitPCM (output: DataView, offset: number, input: ArrayBuffer) {\r\n    const i8xs = new Int8Array(input)\r\n    for (let i = 0; i < i8xs.length; i++, offset++){\r\n      output.setInt8(offset, i8xs[i])\r\n    }\r\n  }\r\n  if (sampleBits === 16) {\r\n    floatTo16BitPCM(view, 44, samples)\r\n  } else if (sampleBits === 8) {\r\n    floatTo8BitPCM(view, 44, samples)\r\n  } else {\r\n    floatTo32BitPCM(view, 44, samples)\r\n  }\r\n  return view.buffer\r\n}\r\n","/**\r\n * Simple helper | bqliu\r\n */\r\n\r\nexport default function readAsArrayBuffer$<T extends Blob>(x: T) {\r\n  return new Promise<ArrayBuffer>((resolve, reject) => {\r\n    const fr = new FileReader()\r\n\r\n    // hmmm, no need to unbind, if it's smart enough\r\n    fr.addEventListener('load', () => resolve(fr.result as ArrayBuffer))\r\n    fr.addEventListener('error', (e) => reject(e))\r\n\r\n    fr.readAsArrayBuffer(x)\r\n  });\r\n}\r\n","import bufferToBase64Wav from './bufferToBase64Wav'\nimport addWavHeader from './addWavHeader'\nimport readAsArrayBuffer$ from './readAsArrayBuffer$'\n\n/**\n * pcmToWav\n * @example\n * pcmToWav(file).then((src) => $audio.src = src)\n */\nexport default function pcmToWav (file: Blob, sampleRate = 16000, sampleBits = 16, channelCount = 1) {\n  return readAsArrayBuffer$(file).then((buffer) => {\n    return bufferToBase64Wav(addWavHeader(buffer, sampleRate, sampleBits, channelCount))\n  })\n}\n"],"names":["bufferToBase64Wav","bufferToBase64"],"mappings":"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"}